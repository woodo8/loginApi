{"version":3,"file":"hybridQueryExecutionContext.js","sourceRoot":"","sources":["../../../src/queryExecutionContext/hybridQueryExecutionContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { ClientContext } from \"../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport {\n  FeedOptions,\n  GlobalStatistics,\n  PartitionedQueryExecutionInfo,\n  QueryInfo,\n  QueryRange,\n  Response,\n} from \"../request\";\nimport { HybridSearchQueryResult } from \"../request/hybridSearchQueryResult\";\nimport { GlobalStatisticsAggregator } from \"./Aggregators/GlobalStatisticsAggregator\";\nimport { CosmosHeaders } from \"./CosmosHeaders\";\nimport { ExecutionContext } from \"./ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { ParallelQueryExecutionContext } from \"./parallelQueryExecutionContext\";\nimport { PipelinedQueryExecutionContext } from \"./pipelinedQueryExecutionContext\";\n\n/** @hidden */\nexport enum HybridQueryExecutionContextBaseStates {\n  uninitialized = \"uninitialized\",\n  initialized = \"initialized\",\n  draining = \"draining\",\n  done = \"done\",\n}\nexport class HybridQueryExecutionContext implements ExecutionContext {\n  private globalStatisticsExecutionContext: ExecutionContext;\n  private componentsExecutionContext: ExecutionContext[] = [];\n  private pageSize: number;\n  private state: HybridQueryExecutionContextBaseStates;\n  private globalStatisticsAggregator: GlobalStatisticsAggregator;\n  private emitRawOrderByPayload: boolean = true;\n  private buffer: HybridSearchQueryResult[] = [];\n  private DEFAULT_PAGE_SIZE = 10;\n  private TOTAL_WORD_COUNT_PLACEHOLDER = \"documentdb-formattablehybridsearchquery-totalwordcount\";\n  private HIT_COUNTS_ARRAY_PLACEHOLDER = \"documentdb-formattablehybridsearchquery-hitcountsarray\";\n  private TOTAL_DOCUMENT_COUNT_PLACEHOLDER =\n    \"documentdb-formattablehybridsearchquery-totaldocumentcount\";\n  private RRF_CONSTANT = 60; // Constant for RRF score calculation\n  private logger: AzureLogger = createClientLogger(\"HybridQueryExecutionContext\");\n\n  constructor(\n    private clientContext: ClientContext,\n    private collectionLink: string,\n    private options: FeedOptions,\n    private partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    private correlatedActivityId: string,\n    private allPartitionsRanges: QueryRange[],\n  ) {\n    this.state = HybridQueryExecutionContextBaseStates.uninitialized;\n    this.pageSize = this.options.maxItemCount;\n    if (this.pageSize === undefined) {\n      this.pageSize = this.DEFAULT_PAGE_SIZE;\n    }\n    if (partitionedQueryExecutionInfo.hybridSearchQueryInfo.requiresGlobalStatistics) {\n      const globalStaticsQueryOptions: FeedOptions = { maxItemCount: this.pageSize };\n      this.globalStatisticsAggregator = new GlobalStatisticsAggregator();\n\n      const globalStatisticsQuery =\n        this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.globalStatisticsQuery;\n      const globalStatisticsQueryExecutionInfo: PartitionedQueryExecutionInfo = {\n        partitionedQueryExecutionInfoVersion: 1,\n        queryInfo: {\n          distinctType: \"None\",\n          hasSelectValue: false,\n          groupByAliasToAggregateType: {},\n          rewrittenQuery: globalStatisticsQuery,\n          hasNonStreamingOrderBy: false,\n        },\n        queryRanges: this.allPartitionsRanges,\n      };\n\n      this.globalStatisticsExecutionContext = new ParallelQueryExecutionContext(\n        this.clientContext,\n        this.collectionLink,\n        globalStatisticsQuery,\n        globalStaticsQueryOptions,\n        globalStatisticsQueryExecutionInfo,\n        this.correlatedActivityId,\n      );\n    } else {\n      this.createComponentExecutionContexts();\n      this.state = HybridQueryExecutionContextBaseStates.initialized;\n    }\n  }\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const nextItemRespHeaders = getInitialHeader();\n    while (\n      (this.state === HybridQueryExecutionContextBaseStates.uninitialized ||\n        this.state === HybridQueryExecutionContextBaseStates.initialized) &&\n      this.buffer.length === 0\n    ) {\n      await this.fetchMoreInternal(diagnosticNode, nextItemRespHeaders);\n    }\n\n    if (this.state === HybridQueryExecutionContextBaseStates.draining && this.buffer.length > 0) {\n      return this.drainOne(nextItemRespHeaders);\n    } else {\n      return this.done(nextItemRespHeaders);\n    }\n  }\n\n  public hasMoreResults(): boolean {\n    switch (this.state) {\n      case HybridQueryExecutionContextBaseStates.uninitialized:\n        return true;\n      case HybridQueryExecutionContextBaseStates.initialized:\n        return true;\n      case HybridQueryExecutionContextBaseStates.draining:\n        return this.buffer.length > 0;\n      case HybridQueryExecutionContextBaseStates.done:\n        return false;\n      default:\n        return false;\n    }\n  }\n\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const fetchMoreRespHeaders = getInitialHeader();\n    return this.fetchMoreInternal(diagnosticNode, fetchMoreRespHeaders);\n  }\n\n  private async fetchMoreInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    headers: CosmosHeaders,\n  ): Promise<Response<any>> {\n    switch (this.state) {\n      case HybridQueryExecutionContextBaseStates.uninitialized:\n        await this.initialize(diagnosticNode, headers);\n        return {\n          result: [],\n          headers: headers,\n        };\n\n      case HybridQueryExecutionContextBaseStates.initialized:\n        await this.executeComponentQueries(diagnosticNode, headers);\n        return {\n          result: [],\n          headers: headers,\n        };\n      case HybridQueryExecutionContextBaseStates.draining:\n        return this.drain(headers);\n      case HybridQueryExecutionContextBaseStates.done:\n        return this.done(headers);\n      default:\n        throw new Error(`Invalid state: ${this.state}`);\n    }\n  }\n\n  private async initialize(\n    diagnosticNode: DiagnosticNodeInternal,\n    fetchMoreRespHeaders: CosmosHeaders,\n  ): Promise<void> {\n    try {\n      while (this.globalStatisticsExecutionContext.hasMoreResults()) {\n        const result = await this.globalStatisticsExecutionContext.nextItem(diagnosticNode);\n        const globalStatistics: GlobalStatistics = result.result;\n        mergeHeaders(fetchMoreRespHeaders, result.headers);\n        if (globalStatistics) {\n          // iterate over the components update placeholders from globalStatistics\n          this.globalStatisticsAggregator.aggregate(globalStatistics);\n        }\n      }\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n\n    // create component execution contexts for each component query\n    this.createComponentExecutionContexts();\n    this.state = HybridQueryExecutionContextBaseStates.initialized;\n  }\n\n  private async executeComponentQueries(\n    diagnosticNode: DiagnosticNodeInternal,\n    fetchMoreRespHeaders: CosmosHeaders,\n  ): Promise<void> {\n    if (this.componentsExecutionContext.length === 1) {\n      await this.drainSingleComponent(diagnosticNode, fetchMoreRespHeaders);\n      return;\n    }\n    try {\n      const hybridSearchResult: HybridSearchQueryResult[] = [];\n      const uniqueItems = new Map<string, HybridSearchQueryResult>();\n\n      for (const componentExecutionContext of this.componentsExecutionContext) {\n        while (componentExecutionContext.hasMoreResults()) {\n          const result = await componentExecutionContext.fetchMore(diagnosticNode);\n          const response = result.result;\n          mergeHeaders(fetchMoreRespHeaders, result.headers);\n          if (response) {\n            response.forEach((item: any) => {\n              const hybridItem = HybridSearchQueryResult.create(item);\n              if (!uniqueItems.has(hybridItem.rid)) {\n                uniqueItems.set(hybridItem.rid, hybridItem);\n              }\n            });\n          }\n        }\n      }\n      uniqueItems.forEach((item) => hybridSearchResult.push(item));\n      if (hybridSearchResult.length === 0 || hybridSearchResult.length === 1) {\n        // return the result as no or one element is present\n        hybridSearchResult.forEach((item) => this.buffer.push(item.data));\n        this.state = HybridQueryExecutionContextBaseStates.draining;\n        return;\n      }\n\n      // Initialize an array to hold ranks for each document\n      const sortedHybridSearchResult = this.sortHybridSearchResultByRRFScore(hybridSearchResult);\n      // store the result to buffer\n      // add only data from the sortedHybridSearchResult in the buffer\n      sortedHybridSearchResult.forEach((item) => this.buffer.push(item.data));\n      this.applySkipAndTakeToBuffer();\n      this.state = HybridQueryExecutionContextBaseStates.draining;\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private applySkipAndTakeToBuffer(): void {\n    const { skip, take } = this.partitionedQueryExecutionInfo.hybridSearchQueryInfo;\n    if (skip) {\n      this.buffer = skip >= this.buffer.length ? [] : this.buffer.slice(skip);\n    }\n    if (take) {\n      this.buffer = take <= 0 ? [] : this.buffer.slice(0, take);\n    }\n  }\n\n  private async drain(fetchMoreRespHeaders: CosmosHeaders): Promise<Response<any>> {\n    try {\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n        return this.done(fetchMoreRespHeaders);\n      }\n      const result = this.buffer.slice(0, this.pageSize);\n      this.buffer = this.buffer.slice(this.pageSize);\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n      }\n      return {\n        result: result,\n        headers: fetchMoreRespHeaders,\n      };\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private async drainOne(nextItemRespHeaders: CosmosHeaders): Promise<Response<any>> {\n    try {\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n        return this.done(nextItemRespHeaders);\n      }\n      const result = this.buffer.shift();\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n      }\n      return {\n        result: result,\n        headers: nextItemRespHeaders,\n      };\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private done(fetchMoreRespHeaders: CosmosHeaders): Response<any> {\n    return {\n      result: undefined,\n      headers: fetchMoreRespHeaders,\n    };\n  }\n\n  private sortHybridSearchResultByRRFScore(\n    hybridSearchResult: HybridSearchQueryResult[],\n  ): HybridSearchQueryResult[] {\n    const ranksArray: { rid: string; ranks: number[] }[] = hybridSearchResult.map((item) => ({\n      rid: item.rid,\n      ranks: new Array(item.componentScores.length).fill(0),\n    }));\n    // Compute ranks for each component score\n    for (let i = 0; i < hybridSearchResult[0].componentScores.length; i++) {\n      // Sort based on the i-th component score\n      hybridSearchResult.sort((a, b) => b.componentScores[i] - a.componentScores[i]);\n\n      // Assign ranks\n      let rank = 1;\n      for (let j = 0; j < hybridSearchResult.length; j++) {\n        if (\n          j > 0 &&\n          hybridSearchResult[j].componentScores[i] !== hybridSearchResult[j - 1].componentScores[i]\n        ) {\n          rank = j + 1;\n        }\n        const rankIndex = ranksArray.findIndex(\n          (rankItem) => rankItem.rid === hybridSearchResult[j].rid,\n        );\n        ranksArray[rankIndex].ranks[i] = rank; // 1-based rank\n      }\n    }\n\n    // Function to compute RRF score\n    const computeRRFScore = (ranks: number[], k: number): number => {\n      return ranks.reduce((acc, rank) => acc + 1 / (k + rank), 0);\n    };\n\n    // Compute RRF scores and sort based on them\n    const rrfScores = ranksArray.map((item) => ({\n      rid: item.rid,\n      rrfScore: computeRRFScore(item.ranks, this.RRF_CONSTANT),\n    }));\n\n    // Sort based on RRF scores\n    rrfScores.sort((a, b) => b.rrfScore - a.rrfScore);\n\n    // Map sorted RRF scores back to hybridSearchResult\n    const sortedHybridSearchResult = rrfScores.map((scoreItem) =>\n      hybridSearchResult.find((item) => item.rid === scoreItem.rid),\n    );\n    return sortedHybridSearchResult;\n  }\n\n  private async drainSingleComponent(\n    diagNode: DiagnosticNodeInternal,\n    fetchMoreRespHeaders: CosmosHeaders,\n  ): Promise<void> {\n    if (this.componentsExecutionContext && this.componentsExecutionContext.length !== 1) {\n      this.logger.error(\"drainSingleComponent called on multiple components\");\n      return;\n    }\n    try {\n      const componentExecutionContext = this.componentsExecutionContext[0];\n      const hybridSearchResult: HybridSearchQueryResult[] = [];\n      while (componentExecutionContext.hasMoreResults()) {\n        const result = await componentExecutionContext.fetchMore(diagNode);\n        const response = result.result;\n        mergeHeaders(fetchMoreRespHeaders, result.headers);\n        if (response) {\n          response.forEach((item: any) => {\n            hybridSearchResult.push(HybridSearchQueryResult.create(item));\n          });\n        }\n      }\n      hybridSearchResult.forEach((item) => this.buffer.push(item.data));\n      this.applySkipAndTakeToBuffer();\n      this.state = HybridQueryExecutionContextBaseStates.draining;\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private createComponentExecutionContexts(): void {\n    // rewrite queries based on global statistics\n    let queryInfos: QueryInfo[] =\n      this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.componentQueryInfos;\n    if (this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.requiresGlobalStatistics) {\n      queryInfos = this.processComponentQueries(\n        this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.componentQueryInfos,\n        this.globalStatisticsAggregator.getResult(),\n      );\n    }\n    // create component execution contexts\n    for (const componentQueryInfo of queryInfos) {\n      const componentPartitionExecutionInfo: PartitionedQueryExecutionInfo = {\n        partitionedQueryExecutionInfoVersion: 1,\n        queryInfo: componentQueryInfo,\n        queryRanges: this.partitionedQueryExecutionInfo.queryRanges,\n      };\n      this.componentsExecutionContext.push(\n        new PipelinedQueryExecutionContext(\n          this.clientContext,\n          this.collectionLink,\n          componentQueryInfo.rewrittenQuery,\n          this.options,\n          componentPartitionExecutionInfo,\n          this.correlatedActivityId,\n          this.emitRawOrderByPayload,\n        ),\n      );\n    }\n  }\n  private processComponentQueries(\n    componentQueryInfos: QueryInfo[],\n    globalStats: GlobalStatistics,\n  ): QueryInfo[] {\n    return componentQueryInfos.map((queryInfo) => {\n      if (!queryInfo.hasNonStreamingOrderBy) {\n        throw new Error(\"The component query must have a non-streaming order by clause.\");\n      }\n      return {\n        ...queryInfo,\n        rewrittenQuery: this.replacePlaceholdersWorkaroud(\n          queryInfo.rewrittenQuery,\n          globalStats,\n          componentQueryInfos.length,\n        ),\n        orderByExpressions: queryInfo.orderByExpressions.map((expr) =>\n          this.replacePlaceholdersWorkaroud(expr, globalStats, componentQueryInfos.length),\n        ),\n      };\n    });\n  }\n  // This method is commented currently, but we will switch back to using this\n  // once the gateway has been redeployed with the fix for placeholder indexes\n  // private replacePlaceholders(query: string, globalStats: GlobalStatistics): string {\n  //   // Replace total document count\n  //   query = query.replace(\n  //     new RegExp(`{${this.TOTAL_DOCUMENT_COUNT_PLACEHOLDER}}`, \"g\"),\n  //     globalStats.documentCount.toString(),\n  //   );\n\n  //   // Replace total word counts and hit counts from fullTextStatistics\n  //   globalStats.fullTextStatistics.forEach((stats, index) => {\n  //     // Replace total word counts\n  //     query = query.replace(\n  //       new RegExp(`{${this.TOTAL_WORD_COUNT_PLACEHOLDER}-${index}}`, \"g\"),\n  //       stats.totalWordCount.toString(),\n  //     );\n  //     // Replace hit counts\n  //     query = query.replace(\n  //       new RegExp(`{${this.HIT_COUNTS_ARRAY_PLACEHOLDER}-${index}}`, \"g\"),\n  //       `[${stats.hitCounts.join(\",\")}]`,\n  //     );\n  //   });\n\n  //   return query;\n  // }\n\n  private replacePlaceholdersWorkaroud(\n    query: string,\n    globalStats: GlobalStatistics,\n    componentCount: number,\n  ): string {\n    // Replace total document count\n    query = query.replace(\n      new RegExp(`{${this.TOTAL_DOCUMENT_COUNT_PLACEHOLDER}}`, \"g\"),\n      globalStats.documentCount.toString(),\n    );\n    let statisticsIndex: number = 0;\n    for (let i = 0; i < componentCount; i++) {\n      // Replace total word counts and hit counts from fullTextStatistics\n      const wordCountPlaceholder = `{${this.TOTAL_WORD_COUNT_PLACEHOLDER}-${i}}`;\n      const hitCountPlaceholder = `{${this.HIT_COUNTS_ARRAY_PLACEHOLDER}-${i}}`;\n      if (!query.includes(wordCountPlaceholder)) {\n        continue;\n      }\n      const stats = globalStats.fullTextStatistics[statisticsIndex];\n      // Replace total word counts\n      query = query.replace(new RegExp(wordCountPlaceholder, \"g\"), stats.totalWordCount.toString());\n      // Replace hit counts\n      query = query.replace(new RegExp(hitCountPlaceholder, \"g\"), `[${stats.hitCounts.join(\",\")}]`);\n      statisticsIndex++;\n    }\n    return query;\n  }\n}\n"]}